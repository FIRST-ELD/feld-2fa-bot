import { Bot, session } from "grammy";
import { conversations, createConversation } from "@grammyjs/conversations";
import { TOTP } from "otpauth";
import dotenv from "dotenv";
import DB from "./lib/db.js";

dotenv.config();

const GROUP_ID = process.env.GROUP_ID;
const ADMIN_STATUSES = ["creator", "administrator"];
const bot = new Bot(process.env.BOT_TOKEN);

const sanitizeBase32 = (str) => str.replace(/[^A-Z2-7]/gi, "").toUpperCase();

bot.use(
  session({
    storage: DB.sessionStorage,
    initial: () => ({ conversation: {} }),
  })
);
bot.use(conversations());

bot.api.setMyCommands([
  { command: "add", description: "–î–æ–±–∞–≤–∏—Ç—å 2FA –∞–∫–∫–∞—É–Ω—Ç" },
  { command: "code", description: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ 2FA (–≤ –≥—Ä—É–ø–ø–µ)" },
  { command: "list_accounts", description: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω—ã)" },
  { command: "delete_account", description: "–£–¥–∞–ª–∏—Ç—å 2FA –∞–∫–∫–∞—É–Ω—Ç (–∞–¥–º–∏–Ω—ã)" },
  { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
]);

async function addApp(conversation, ctx) {
  await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á 2FA (Base32).");

  const response = await conversation.waitFor("message:text");
  const secret = response.message.text.trim();

  const sanitizedSecret = sanitizeBase32(secret);
  if (!sanitizedSecret) {
    return ctx.reply("‚ö†Ô∏è –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.");
  }

  if (sanitizedSecret.length < 1) {
    return ctx.reply("–í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—É—Å—Ç.");
  }

  if (sanitizedSecret === "/add") {
    return ctx.reply("–í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á /add ?????.");
  }

  await DB.setUser(ctx.from.id, {
    secret: sanitizedSecret,
    firstName: ctx.from.first_name,
    lastName: ctx.from.last_name || "",
    userId: ctx.from.id,
  });

  await ctx.reply(`‚úÖ 2FA –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
}

bot.use(createConversation(addApp));

bot.command("add", async (ctx) => {
  if (ctx.chat.type !== "private") {
    await ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.");
    return;
  }

  const existing = await DB.getUser(ctx.from.id);
  if (existing?.secret) {
    await ctx.reply(
      "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2FA –∞–∫–∫–∞—É–Ω—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    );
    return;
  }

  await ctx.conversation.enter("addApp");
});

bot.command("code", async (ctx) => {
  const userData = await DB.getUser(ctx.from.id);
  if (!userData?.secret) {
    return ctx.reply("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ 2FA –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /add.");
  }

  const sanitizedSecret = sanitizeBase32(userData.secret);
  if (!sanitizedSecret) {
    return ctx.reply("‚ö†Ô∏è –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.");
  }

  try {
    const otp = new TOTP({ secret: sanitizedSecret }).generate();
    await ctx.reply(`üîë OTP –¥–ª—è ${ctx.from.first_name}: <code>${otp}</code>`, {
      parse_mode: "HTML",
    });
  } catch (err) {
    console.error(err);
    return ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ OTP –∫–æ–¥–∞.");
  }
});

bot.command("list_accounts", async (ctx) => {
  const member = await ctx.api.getChatMember(GROUP_ID, ctx.from.id);
  if (!ADMIN_STATUSES.includes(member.status)) {
    return ctx.reply(
      "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
    );
  }

  const users = await DB.getAllUsers();

  if (!users.length) {
    return ctx.reply("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö 2FA –∞–∫–∫–∞—É–Ω—Ç–æ–≤.");
  }

  const message = users
    .map((u, i) => `${i + 1}. ${u.firstName} ${u.lastName} ${u.userId}`)
    .join("\n");

  await ctx.reply(`üìú –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n${message}`, {
    parse_mode: "HTML",
  });
});

bot.command("delete_account", async (ctx) => {
  const member = await ctx.api.getChatMember(GROUP_ID, ctx.from.id);
  if (!ADMIN_STATUSES.includes(member.status)) {
    return ctx.reply(
      "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
    );
  }

  const [_, userID] = ctx.message.text.split(" ");
  if (!userID) return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_account <userID>");

  const user = await DB.getUser(userID);
  if (!user?.secret) return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");

  await DB.deleteUser(userID);
  await ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userID} —É–¥–∞–ª–µ–Ω.`);
});

bot.command("start", (ctx) =>
  ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 2FA.")
);

bot.catch((err) => console.error("Bot error:", err));

bot.start().then(() => console.log("Bot is running...."));
